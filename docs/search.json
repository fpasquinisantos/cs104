[
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#why-programming",
    "href": "classes/01 - Introduction/09-04-slide.html#why-programming",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Why programming?",
    "text": "Why programming?\n\nCreation:\n\nComputing is part of God’s world\n\nit reveals wisdom and ingenuity on how God made things work (see Isaiah 28:23-29)\nit is enabling science today (study of God’s world)\nit is enabling new technology today (building culture for God’s glory)\n\nThe process of breaking down a problem into precise steps can be a form of developing intellectual virtue\nThrough discovery and automation, it can enable human flourishing\nThere is joy in the process (creative, rewarding, fun)\n\nFall:\n\nIt is being centralized into few powerful actors, harming cultural diversity and freedom\nIt is alienating people from God’s good created order\nIt is being misused for Mammon\nConstantly idolized\n\nRedemption:\n\nWe’re called to follow Jesus in showing God’s glory through our cultural activity, which includes computing and its virtuous practice on:\n\nimagining\ndesigning\nregulating\nusing",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#lets-know-each-other",
    "href": "classes/01 - Introduction/09-04-slide.html#lets-know-each-other",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Let’s know each other",
    "text": "Let’s know each other\nStand up and sit when someone says what you would say:\n\n1st round: major\n2nd round: favorite sport\n3rd round: favorite board game",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#who-am-i",
    "href": "classes/01 - Introduction/09-04-slide.html#who-am-i",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Who am I?",
    "text": "Who am I?\nProf. Fernando Santos\n\nFrom São Carlos, Brazil\n\nPortuguese, not Spanish!\nCerrado (“brazilian savannah”), not jungle!\n\nMajor in computer engineering, PhD in complex systems modeling\nMarried to Jemima, dad of Suzana (6) and Natanael (4)",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#our-relationship",
    "href": "classes/01 - Introduction/09-04-slide.html#our-relationship",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Our relationship",
    "text": "Our relationship\nHeidelberg Catechism Q&A 107:\nWhen god forbids envy, hatred, and anger, he commands us to [h] love our neighbor as ourselves; to show [i] patience, peace, [j] meekness, [k] mercy, and all kindness, towards him, [l] and prevent his hurt as much as in us lies’ and that we [m] do good, even to our enemies.\n[a]: Mat. 5:21,22; Prov. 12:18; Mat. 26:52\n[b]: Eph. 4:26; Rom. 12:19; Mat. 5:39,40\n[c]: Mat. 4:5,6,7; Col. 2:23\n[d]: Gen. 9:6; Mat. 26:52; Rom. 13:4\n[e]: James 1:20; Gal. 5:20\n[f]: Rom. 1:29; 1John 2:9\n[g]: 1John 3:15\n[h]: Mat. 22:39; Mat. 7:12\n[i]: Rom. 12:10\n[j]: Eph. 4:2; Gal. 6:1,2; Mat. 5:5; Rom. 12:18\n[k]: Ex. 23:5\n[l]: Mat. 5:45\n[m]: Rom. 12:20",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#syllabus-bingo",
    "href": "classes/01 - Introduction/09-04-slide.html#syllabus-bingo",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Syllabus Bingo",
    "text": "Syllabus Bingo\n\n\n\n\n\n\n\n\n\nQuizzes\nWebsites I need to register\nStudy sessions\n\n\nSoftware we are using\nOffice hours\nChatGPT\n\n\nReadings\nDiversity and inclusion\nSchedule",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#program-1",
    "href": "classes/01 - Introduction/09-04-slide.html#program-1",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Program",
    "text": "Program\n\nProgramming = writing programs. What are programs?",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#programs-are-forms-of-wisdom",
    "href": "classes/01 - Introduction/09-04-slide.html#programs-are-forms-of-wisdom",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Programs are forms of wisdom",
    "text": "Programs are forms of wisdom\n\n\n\n\n\n\n\n\n\n\n\n22 “The Lord brought me forth as the first of his works, before his deeds of old; 23 I was formed long ages ago, at the very beginning, when the world came to be. 24 When there were no watery depths, I was given birth, when there were no springs overflowing with water; 25 before the mountains were settled in place, before the hills, I was given birth, 26 before he made the world or its fields or any of the dust of the earth. 27 I was there when he set the heavens in place, when he marked out the horizon on the face of the deep, 28 when he established the clouds above and fixed securely the fountains of the deep, 29 when he gave the sea its boundary so the waters would not overstep his command, and when he marked out the foundations of the earth. 30 Then I was constantly at his side. I was filled with delight day after day, rejoicing always in his presence, 31 rejoicing in his whole world and delighting in mankind. Proverbs 8.22-31",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#drawing-as-a-program",
    "href": "classes/01 - Introduction/09-04-slide.html#drawing-as-a-program",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Drawing as a program",
    "text": "Drawing as a program",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#section",
    "href": "classes/01 - Introduction/09-04-slide.html#section",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "",
    "text": "We use programs to compute numbers.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#automatic-computation",
    "href": "classes/01 - Introduction/09-04-slide.html#automatic-computation",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Automatic computation",
    "text": "Automatic computation\n\nCharles Babbage is known for developing the first automatic computer machine (1820’s)\n\n“the faster and more reliably one could calculate, the more money businesses could make.”\n\n\n\n\n\n\n\n\n\nAda Lovelace, daughter of Lord Byron, became enamoured by Babbage’s machine and developed the first algorithm, to calculate a sum of numbers:",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#algorithm",
    "href": "classes/01 - Introduction/09-04-slide.html#algorithm",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Algorithm",
    "text": "Algorithm\n\nBasically, a program: a description of a series of operations.\nBut with some specific features:\n\nPrecise and unambiguous steps\nDefinite results\nFinite\nGeneralizable (works with a range of possible inputs)\nUsually expressed through abstract/mathematical notation",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#stem-today-is-programming-computations",
    "href": "classes/01 - Introduction/09-04-slide.html#stem-today-is-programming-computations",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "STEM today is programming computations",
    "text": "STEM today is programming computations\n\nFor complex calculations, we don’t rely anymore on pressing calculator buttons. We have to make automatic computation programs",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#section-1",
    "href": "classes/01 - Introduction/09-04-slide.html#section-1",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "",
    "text": "Initially, computer operators had to set the program manually to run…",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#punched-cards",
    "href": "classes/01 - Introduction/09-04-slide.html#punched-cards",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Punched cards",
    "text": "Punched cards\n\nAt the end of the 1800s, Herman Hollerith invented the punched card, to be automatically read by a machine.\nInstructions were then CODED in the punched card.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#grace-hoppers-proposal",
    "href": "classes/01 - Introduction/09-04-slide.html#grace-hoppers-proposal",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Grace Hopper’s proposal",
    "text": "Grace Hopper’s proposal\n\nLater, in 1949, Grace Hopper invented the first programming language: COBOL (COmmon Business-Oriented Language)\n\nFor example, the user would write: COMPUTE SUM = (1 + 3) DIVIDE SUM BY 2 GIVING AVERAGE\n\nCrucial to this was the development of the compiler: a program capable of converting a sentence very much like an English phrase (with syntax and semantics) into machine instructions.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#so-whats-a-code",
    "href": "classes/01 - Introduction/09-04-slide.html#so-whats-a-code",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "So, what’s a code?",
    "text": "So, what’s a code?\n\n“A program that follows a set of rules” (in order to be correctly interpreted)\nTo learn how to program, then, is to learn how to express yourself correctly through the code\n\nNotice the origin of the word - codex",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html#python-programming-language",
    "href": "classes/01 - Introduction/09-04-slide.html#python-programming-language",
    "title": "CS 104 (Applied Computing) at Calvin University",
    "section": "Python programming language",
    "text": "Python programming language\n\nInvented in the early 1990s by Guido van Rossum, named after Monty Python’s Flying Circus\nOpen source project\nHigh-level, general-purpose language\nWidely available, easy to learn, rich in tools and libraries, and portable",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html",
    "href": "classes/01 - Introduction/index.html",
    "title": "01 - Introduction",
    "section": "",
    "text": "Objectives for this unit:",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html#programming",
    "href": "classes/01 - Introduction/index.html#programming",
    "title": "01 - Introduction",
    "section": "Programming",
    "text": "Programming\n\nUnderstand what are programs, codes and algorithms.\nUnderstand what is a programming language and how it can be tricky to use them.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html#variables-and-objects",
    "href": "classes/01 - Introduction/index.html#variables-and-objects",
    "title": "01 - Introduction",
    "section": "Variables and Objects",
    "text": "Variables and Objects\n\nDescribe what variables and objects are in Python, and differentiate between them.\nDeclare and initialize variables with different data types (e.g., integers, floats, strings).\nIdentify and apply the rules for naming variables in Python.\nConvert between data types (int(), float(), str()).\nPerform basic variable assignments.\nUse multiple assignments to assign values to several variables simultaneously.\nSwap values between variables using assignment.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html#input-and-output",
    "href": "classes/01 - Introduction/index.html#input-and-output",
    "title": "01 - Introduction",
    "section": "Input and output",
    "text": "Input and output\n\nUse the input() function to read data from the user.\nUse the print() function to display information to the user.\nFormat output using different methods (e.g., string concatenation, f-strings).",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html#comments-and-programming-style",
    "href": "classes/01 - Introduction/index.html#comments-and-programming-style",
    "title": "01 - Introduction",
    "section": "Comments and programming style",
    "text": "Comments and programming style\n\nExplain the importance of following programming style\nExplain the importance of commenting code for readability and maintainability.\nUse the # symbol to write single-line comments in Python.\nUse triple quotes (’’’ or “““) to write multi-line comments in Python.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/index.html#math-operations",
    "href": "classes/01 - Introduction/index.html#math-operations",
    "title": "01 - Introduction",
    "section": "Math operations",
    "text": "Math operations\n\nPerform addition, subtraction, multiplication, and division using Python operators.\nExplain and use the modulus, exponentiation, and floor division operators.\nUnderstand and apply the rules of operator precedence in expressions.\nImport the math module and explain its purpose.\nUse common math functions (e.g., sqrt(), ceil(), floor(), pow()) to perform mathematical calculations.",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction"
    ]
  },
  {
    "objectID": "lab-instructions.html",
    "href": "lab-instructions.html",
    "title": "Lab Instructions",
    "section": "",
    "text": "Remember that lab attendance is required. If you cannot come, please let us know in advance. Not attending the lab without legitimate reasons will unfortunately receive 0 points.\nPlease don’t bring food and drink to this lab. (For classes in the other room, NH253, this is fine).\n\n\n\n\nThe basic idea:\n\nPerson 1 acts as a coder (typing into the code)\nPerson 2 acts as a code reviewer\nAlternate the roles after each solving each problem\nBoth should discuss how to tackle the problem before coding\n\nLOTS of advantages\n\nMutual learning\nHelps spotting some stupid typos/mistakes we may end up writing (and these can difficult to detect later)\nWhile one gives attention to the “tactical” aspect of getting some small stuff done, the other is thinking about the bigger picture, the “strategical” aspect.\n\nIt takes some patience to just sit and look at someone writing. We are not trained in this kind of attention. But in the end it can be VERY satisfactory.\nIn the end, submit just one copy per pair\n\nPut down the names of both members as authors\nPut down the class A/B\nE.g., Frodo Baggins (Calvin-ID) A\n\n\n\n\n\n\nAt the top of each program file, include something like this:\n\n\"\"\"CS 108 - Lab 1.5\nUse a simple formula to estimate pi which is\naccurate to 6 digits.\n@author: Frodo Baggins (123456) A\n@author: Samwise Gamgee (654321) A\n@date: Spring, 2024\n\"\"\"\n\nThe template header is actually:\n\n\"\"\"CS 108 - Lab/Homework X.X\nDescribe the module here. Fix the lab number above and\nthe name/date below.\nDelete the second @author line if working solo.\n@author: YOUR-NAME (yourid123) A/B\n@author: PARTNER-NAME (theirid123) A/B\n@date: semester, year\n\"\"\"\n\n\n\n\nEach question carries 20 points\n\nTest for documentation (2 points)\n\nThe file name checking (e.g., Lab1_1.py)\nA brief description of the program file\nAuthorship (including the section)\n\nCorrectness (18 points for Lab1.1 and 16 points for others)\nCode documentation (2 points)\n\ni.e., concise and clear comments about the code\n\nE.g., print(pi)  # print out the estimated value of pi",
    "crumbs": [
      "Syllabus",
      "Lab Instructions"
    ]
  },
  {
    "objectID": "lab-instructions.html#pair-programming",
    "href": "lab-instructions.html#pair-programming",
    "title": "Lab Instructions",
    "section": "",
    "text": "The basic idea:\n\nPerson 1 acts as a coder (typing into the code)\nPerson 2 acts as a code reviewer\nAlternate the roles after each solving each problem\nBoth should discuss how to tackle the problem before coding\n\nLOTS of advantages\n\nMutual learning\nHelps spotting some stupid typos/mistakes we may end up writing (and these can difficult to detect later)\nWhile one gives attention to the “tactical” aspect of getting some small stuff done, the other is thinking about the bigger picture, the “strategical” aspect.\n\nIt takes some patience to just sit and look at someone writing. We are not trained in this kind of attention. But in the end it can be VERY satisfactory.\nIn the end, submit just one copy per pair\n\nPut down the names of both members as authors\nPut down the class A/B\nE.g., Frodo Baggins (Calvin-ID) A",
    "crumbs": [
      "Syllabus",
      "Lab Instructions"
    ]
  },
  {
    "objectID": "lab-instructions.html#dont-forget-headers-in-files",
    "href": "lab-instructions.html#dont-forget-headers-in-files",
    "title": "Lab Instructions",
    "section": "",
    "text": "At the top of each program file, include something like this:\n\n\"\"\"CS 108 - Lab 1.5\nUse a simple formula to estimate pi which is\naccurate to 6 digits.\n@author: Frodo Baggins (123456) A\n@author: Samwise Gamgee (654321) A\n@date: Spring, 2024\n\"\"\"\n\nThe template header is actually:\n\n\"\"\"CS 108 - Lab/Homework X.X\nDescribe the module here. Fix the lab number above and\nthe name/date below.\nDelete the second @author line if working solo.\n@author: YOUR-NAME (yourid123) A/B\n@author: PARTNER-NAME (theirid123) A/B\n@date: semester, year\n\"\"\"",
    "crumbs": [
      "Syllabus",
      "Lab Instructions"
    ]
  },
  {
    "objectID": "lab-instructions.html#grading-example-for-lab-1",
    "href": "lab-instructions.html#grading-example-for-lab-1",
    "title": "Lab Instructions",
    "section": "",
    "text": "Each question carries 20 points\n\nTest for documentation (2 points)\n\nThe file name checking (e.g., Lab1_1.py)\nA brief description of the program file\nAuthorship (including the section)\n\nCorrectness (18 points for Lab1.1 and 16 points for others)\nCode documentation (2 points)\n\ni.e., concise and clear comments about the code\n\nE.g., print(pi)  # print out the estimated value of pi",
    "crumbs": [
      "Syllabus",
      "Lab Instructions"
    ]
  },
  {
    "objectID": "tips-resources.html",
    "href": "tips-resources.html",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "A word to the wise: Starting early is essential to success in programming. Newcomers sometimes think that they can start an assignment at the last minute and do reasonably well. Programming isn’t like writing a paper, where you can have partially developed arguments and missing information but still have something to submit. In programming, it either works or it doesn’t, and it is often very easy to tell.\n\ncome to class and lab\ncome to study sessions and drop by when prof is in lab\ntake small steps\nuse the autograder often\ndiscuss why something worked or didn’t work\ntake frequent breaks\nmake your own cheat-sheet of syntax and concepts you’ve learned\n\nHelp others to succeed. The last thing we want to reinforce in our education is the idea that success only depends on individual effort. You’ll see that programming is much easier when done in community. Two or more people looking at the same code is twice or more the attention to details that is necessary for avoiding mistakes, remembering syntax and keeping objectives on track. - This doesn’t mean to be carried by our teammates - i.e., letting them do all the work for you. Insist in participating. Don’t split tasks and exercises. It may be easy to get good grades in courses that involve group work, but though it may solve your problem now (i.e., passing the course), this will be really a problem in the future, where you may be required to take the lead in solving a programming problem, for example. I’ve seen lots of cases like this in academic education and it is really awful.\nDon’t neglect textbook readings. In all my experience and a little of data analysis in courses I teach, there is a very clear correlation between low engagement with the textbook and low grades. So, be active in your reading. I know that everything around us today encourage us to just skim through texts, but that is not a good way to study. Think with the text. Ask questions. Annotate. Focus. You can do it. - The same applies for classes. Reading and listening aren’t passive. They are active abilities that can and have to be developed.\n\n\n\n\nThe official Python tutorial\nCodecademy’s “Learn Python” Tutorial\nfuturecoder python tutorial: nicely done, but only covers the basics\neducative python tutorial: not quite as slick as futurecoder, but it covers some important things that are missing there.\nW3Schools Python Tutorial and Quiz\nKaggle tutorials:\n\nlearn python\nlearn pandas\n\n\n\n\n\n\nPython standard library\n\n\n\n\n\nPythonTutor\nSome Python practice problems\n\n\n\n\n\nFalsehoods Programmers Believe About Names\nfloat.exposed and integer.exposed\nHow ints and floats (and other binary numbers) work: an interactive tutorial, and a very comprehensive reference",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "tips-resources.html#how-to-succeed-in-this-class",
    "href": "tips-resources.html#how-to-succeed-in-this-class",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "A word to the wise: Starting early is essential to success in programming. Newcomers sometimes think that they can start an assignment at the last minute and do reasonably well. Programming isn’t like writing a paper, where you can have partially developed arguments and missing information but still have something to submit. In programming, it either works or it doesn’t, and it is often very easy to tell.\n\ncome to class and lab\ncome to study sessions and drop by when prof is in lab\ntake small steps\nuse the autograder often\ndiscuss why something worked or didn’t work\ntake frequent breaks\nmake your own cheat-sheet of syntax and concepts you’ve learned\n\nHelp others to succeed. The last thing we want to reinforce in our education is the idea that success only depends on individual effort. You’ll see that programming is much easier when done in community. Two or more people looking at the same code is twice or more the attention to details that is necessary for avoiding mistakes, remembering syntax and keeping objectives on track. - This doesn’t mean to be carried by our teammates - i.e., letting them do all the work for you. Insist in participating. Don’t split tasks and exercises. It may be easy to get good grades in courses that involve group work, but though it may solve your problem now (i.e., passing the course), this will be really a problem in the future, where you may be required to take the lead in solving a programming problem, for example. I’ve seen lots of cases like this in academic education and it is really awful.\nDon’t neglect textbook readings. In all my experience and a little of data analysis in courses I teach, there is a very clear correlation between low engagement with the textbook and low grades. So, be active in your reading. I know that everything around us today encourage us to just skim through texts, but that is not a good way to study. Think with the text. Ask questions. Annotate. Focus. You can do it. - The same applies for classes. Reading and listening aren’t passive. They are active abilities that can and have to be developed.",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "tips-resources.html#tutorials",
    "href": "tips-resources.html#tutorials",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "The official Python tutorial\nCodecademy’s “Learn Python” Tutorial\nfuturecoder python tutorial: nicely done, but only covers the basics\neducative python tutorial: not quite as slick as futurecoder, but it covers some important things that are missing there.\nW3Schools Python Tutorial and Quiz\nKaggle tutorials:\n\nlearn python\nlearn pandas",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "tips-resources.html#references",
    "href": "tips-resources.html#references",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "Python standard library",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "tips-resources.html#tools",
    "href": "tips-resources.html#tools",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "PythonTutor\nSome Python practice problems",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "tips-resources.html#other-interesting-things",
    "href": "tips-resources.html#other-interesting-things",
    "title": "Success Tips and Resources",
    "section": "",
    "text": "Falsehoods Programmers Believe About Names\nfloat.exposed and integer.exposed\nHow ints and floats (and other binary numbers) work: an interactive tutorial, and a very comprehensive reference",
    "crumbs": [
      "Syllabus",
      "Success Tips and Resources"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Syllabus",
    "section": "",
    "text": "Open my eyes, that I may behold wondrous things out of your law. Psalm 119.18\n\nWelcome to CS-104-A, Applied Computing!\n\n\n\n\n\n\nWhy programming?\n\n\n\n\n\n\nCreation:\n\nComputing is part of God’s world\n\nit reveals wisdom and ingenuity on how God made things work (see Isaiah 28:23-29)\nit is enabling science today (study of God’s world)\nit is enabling new technology today (building culture for God’s glory)\n\nThe process of breaking down a problem into precise steps can be a form of developing intellectual virtue\nThrough discovery and automation, it can enable human flourishing\nThere is joy in the process (creative, rewarding, fun)\n\nFall:\n\nIt is being centralized into few powerful actors, harming cultural diversity and freedom\nIt is alienating people from God’s good created order\nIt is being misused for Mammon\nConstantly idolized\n\nRedemption:\n\nWe’re called to follow Jesus in showing God’s glory through our cultural activity, which includes computing and its virtuous practice on:\n\nimagining\ndesigning\nregulating\nusing\n\n\n\n\n\n\n\n\n\n\n\n\nHow?\n\n\n\n\n\nWe will be using the Python programming language, which is one of the most popular programming languages because it is both beginner-friendly and very powerful.\nThe material is considered in the context of the reformed Christian perspective.\n\n\n\n\nLearning Outcomes\nThis course introduces computing as a problem solving discipline with a particular emphasis on programming. Students who complete this course will demonstrate that they can:\n\nDesign algorithms and data types/structures to solve computational problems, using:\n\nprimitive data types, expressions and arrays/lists;\nbasic control structures: sequences, selection and repetition\nsubprograms (methods/functions;\nclasses;\n\nFind and fix syntactic and logical problems in programs;\nUse an Integrated Development Environment (IDE) to develop a program;\nUnderstand the wider implications of encoding intelligence in the form of algorithms.\n\n\n\nStaff\n\nProfessor Fernando Pasquini Santos - office hours: at NH291, Tuesdays 9-9:50am, 4-5pm, fs33@calvin.edu\nLab assistant: TBA\nGrader: TBA\n\n\n\nSchedule\n\n\n\n\n\n\nSchedule\n\n\n\n\n\nSchedule is subject to change. Updates will be made here and on Moodle.\n\n\n\n\n\n\n\n\n\n\nUnit\nClasses\nDay of Week\nContent\n\n\n\n\n\n09-02\nMonday\nLabor Day\n\n\n\n09-03\nTuesday\nNO LAB\n\n\n1 - Introduction\n09-04\nWednesday\nWelcome and introduction\n\n\n1 - Introduction\n09-06\nFriday\nVariables, Objects, Assignments\n\n\n1 - Introduction\n09-09\nMonday\nInput/Output\n\n\n1 - Introduction\n09-10\nTuesday\nLAB 1 - Introduction\n\n\n1 - Introduction\n09-11\nWednesday\nOperators and math\n\n\n2 - Types\n09-13\nFriday\nLists and tuples\n\n\n2 - Types\n09-16\nMonday\nDictionaries\n\n\n2 - Types\n09-17\nTuesday\nLAB 2 - Data types\n\n\n2 - Types\n09-18\nWednesday\nNumpy arrays\n\n\n3 - Conditionals\n09-20\nFriday\nIf-else\n\n\n3 - Conditionals\n09-23\nMonday\nComparison and boolean operators\n\n\n3 - Conditionals\n09-24\nTuesday\nLAB 3 - Conditionals\n\n\n4 - Loops\n09-25\nWednesday\nWhile and for\n\n\n4 - Loops\n09-27\nFriday\nIterating techniques\n\n\n5 - Functions\n09-30\nMonday\nFunctions\n\n\n4 - Loops\n10-01\nTuesday\nLAB 4 - Loops\n\n\n5 - Functions\n10-02\nWednesday\nVariable scope in functions\n\n\n5 - Functions\n10-04\nFriday\nString manipulation\n\n\n5 - Functions\n10-07\nMonday\nModules and namespaces\n\n\n5 - Functions\n10-08\nTuesday\nLAB 5 - Functions\n\n\n6 - Classes\n10-09\nWednesday\nClass attributes and methods\n\n\n6 - Classes\n10-11\nFriday\nOperator overloading\n\n\n6 - Classes\n10-14\nMonday\nInheritance\n\n\n6 - Classes\n10-15\nTuesday\nLAB 6 - Classes\n\n\n7 - Wrap-up\n10-16\nWednesday\nWrap-up\n\n\n\n10-18\nFriday\nFall Break\n\n\n\n\n\n\n\n\nCommunication\nOutside of class, we’ll use:\n\nOffice hours;\nMoodle:\n\nYou can use our Q&A Forum to post questions on assignments, concepts discussed in class, or when you have problems getting code to run. Post answers as well. You might be able to provide a good answer before the course staff even sees the question!\nWe also have a General Topics forum, in case you want to post notes on articles or events that might be of interest to the class. In general, don’t post code publicly. If you have to include code, make the post private first so the course staff can decide if it’s ok to share.\n\nEmail — Please restrict email use for requests for accommodations (e.g.: missing class; disabilities; mental health; etc.).\n\nYou’ll generally find us responsive on Monday through Friday, but less so on the weekend, particularly Sunday. You’re free to schedule your work as best works for you, but we’ll be trying to observe a Sabbath in our own schedules.\n\n\nMaterials\n\n\n\n\n\n\nTexts\n\n\n\n\n\n\nZyBooks \nWe will be using an online text called Programming in Python 3 with ZyLabs. The text will cost $89 and can be accessed as follows:\n1.  Sign up at [learn.zybooks.com](http://learn.zybooks.com/) (see Zyante's [privacy policy](https://www.zybooks.com/privacy-policy/)). Note that you must use your Calvin e-mail address (e.g., `xyz27@calvin.edu`).\n2.  Enter zyBook code: `**CALVINCS108PasquiniSantosSpring2024**`\n3.  Click *Subscribe*.\nYou’ll also see that ZyBooks provides reading, lab and homework assignments matching those specified in the unit preparation pages on Moodle (find these under the “Assignments” tab on the far bottom right of our course textbook page). Though the ZyBooks text is interactive, you do have the option to print a PDF version of each chapter, which can be useful as a reference after the course is over and the ZyBooks electronic submission has ended.\n\n\nWebsite and class handouts\nThis website will be constantly updated with concepts and activities we will follow through in class. Every class section will have a handout that will be posted on Perusall.\n\n\nPerspectives readings\nSseveral articles on programming that will be available on Perusall. We expect you to interact and discuss with these texts.\n\n\n\n\n\n\nImportant\n\n\n\nThe articles on reflections about programming that we are going to read are presenting lots of different opinions that may not reflect what I, myself, subscribe to. And you also are not required to agree with them! The idea of choosing them as reading assignments is just to put these ideas on the table so we can develop a healthy and friendly discussion on these themes, which sometimes may not be simple. So, take this also as an exercise in tolerance, sympathy and respect. We can still learn a lot with people we don’t agree completely.\n\n\n\n\n\n\n\n\n\n\n\n\nWork Environment\n\n\n\n\n\nWe will use Thonny as the integrated development environment of our programming exercises in Python.\nThe labs in SB 354 & 372 are pre-configured to support this course, so if you are on campus, you are free to do all your course work there. If you are off campus, you have two options: a) using your own machine or b) accessing the lab machines remotely. We suggest that you install the software on your own machine and then use the option you find most convenient.\n\nInstall Thonny in your own machine Install the latest version of Thonny development environment for your system type. Thonny has a current version of Python built-in and should work without further configuration; or\nAccess the lab machines remotely There are a limited number of remote and virtual machines available for CS courses. You can find:\n\nthe list of machines here: https://remote.cs.calvin.edu\nthe instructions for using those machines here: https://cs.calvin.edu/sysadmin/remoteaccess-guacamole.php\n\n\n\n\n\n\n\nActivities\n\nPreparation reading (zyBooks textbook): you’ll do these readings as a preparation for introducing new unit on Fridays. As you work through the text, complete the “participation” activities in the specified sections as you go. You can skip the “challenge” activities.\nPerspectives reading (on Perusall): every other week, you’ll read an article about common themes in programming and their wider societal implications. After this reading, you will be asked to make comments on the text and interact with your colleagues responses. Perusall has many nice tools to make this a nice shared reading experience. Try not to do it just for the sake of getting the assignment done and get the grade.\nClass activities: during our classes, we will proceed according to a POGIL approach (Process Oriented Guided Inquiry Learning). Class activities will be posted on our Perusall page. We will form teams of three students in order to solve a set of questions and exercises. The teams will need to have:\n\na programmer (runs the exercises in Thonny)\na recorder (writes the team’s answers to the exercises)\na manager/presenter (keeps the team on track; interacts with class)\n\nLab: we’ll go through a series of programming assignments during our lab classes every Tuesday. These are posted as assignments in zyBooks, where you and you partner will also submit your solutions.\n\nIf feasible, you will work in pairs during the lab exercises and you may work in pairs for your homeworks as well. When you work in a pair, one of the partners should submit one copy of your work with both of your names and usernames on it. It’s wise for both partners to have copies of your shared solution. Your partner must be someone else from this course this semester.\nThe lab is configured to support the course work, but if you’re prepared to do some administrative work, you can configure your own machine to do the lab work. Alternatively, you can login remotely to the labs using a web browser. See “Getting Started” for more information.\n\nQuiz: usually on Wednesdays, we will have a 15 to 20 minute closed-notes quiz on Moodle reviewing and applying the concepts we got from the unit. The quiz will be done in classroom, so you will want to bring your laptop or any other device.\n\nExceptionally at week 1, we won’t have a Quiz (too early for that).\n\nHomework: these will also be posted as assignments on our zyBooks course page. These will total 6 homework assignments during the course.\n\nPlus, every other week we will have a\n\n\nGrading\nWe will compute your final grade as follows:\n\n5% — Preparation readings (zyBooks) (6 in total)\n5% — Perspectives readings (Perusall) (3 in total)\n40% — Quizzes (6 in total)\n50% — Homeworks (6 in total)\n\nWe’ll throw out your lowest quiz score.\nCS 108L (1 credit)\n\n100% — Lab exercises (pair programming) (6 in total)\n\nYour grades will be available in the Moodle gradebook.\n\n\nStudy Sessions\nFor this course, Calvin makes available a tutoring service for helping with study. Here are the advantages of participating at Study Sessions:\n\n4-8 hours of tutoring per week\nA nice place to do homework and ask questions\nAn entire room of people working through the same challenges\nA chance to make friends and study partners\n\nThe service is completely free and flexible. For more information, visit https://calvin.edu/go/tutor\n\n\nUse of Technology\nWe believe that technology is not neutral: we use them, but they also affect us. Consequently, technology in the classroom changes things. Studies suggest that internet-enabled electronic devices in the classroom reduces student performance. We will use technology in class, but with limits:\n\nYou may use a smartphone or laptop to complete retrieval quizzes and polls during designated times.\nYou may use laptops to take notes or attempt programming tasks.\nBeyond those uses, technology use in class should be limited to critical messages only.\n\nFurthermore, in general, it’s not a good idea to copy code from Web sources or to use large language models (e.g., ChatGPT). Think of that as the same as cooking ready-made dinner in your microwave oven versus really learning how to cook. The results may sometimes be acceptable, but won’t be healthy and won’t put you in contact with ingredients and processes. As Christians, I believe we need to write the most humane and hospitable code we can, as a way of serving others and reflecting God’s glory. And for that, we need the disposition to fully engage with computational logic as a way of honoring God’s wisdom reflected in programming. Automating the process too much may alienate us - and our fellow people - from that, and cause a lot of problems.\nThis doesn’t mean I’m all against the use of generative AI. But we need to do that responsibly. There’s always a risk that these tools may fail and we may even not perceive it - not to mention the privacy issues. For more info on responsbile use of generative AI, see this page.\n\n\nAcademic Integrity\nCode re-use can be a valuable practice in computing, but reusing code or algorithms without attribution is plagiarism. If you’ve copied code with attribution, we’ll grade you on the code you wrote not on the code you copied. If we detect copying without attribution, i.e., plagiarism, we’ll be forced to give you a failing grade for the assignment and perhaps for the course. Additionally, we will report you to the office of Judicial Affairs, which may result in the incident being part of your student record.\nThe student-faculty relationship is based on trust and mutual respect, which can be seriously undermined by the suspicion or reality of academic dishonesty. Academic Dishonesty includes, but is not limited to, plagiarism (students plagiarize when they do not credit the sources of their writing - the words, information, ideas, or opinions of others), improper group work, reuse of a paper from another course and/or cheating on a test. Students are encouraged to speak to their faculty member with specific questions related to academic dishonesty. For further clarification or information, please visit https://calvin.edu/directory/policies/academic-integrity-policy.\n\n\nSpecial Circumstances\nOccasionally there are special circumstances that require that course policies be adjusted for a particular student. In such cases, it is the responsibility of the student to inform us of the situation as soon as possible, so that the appropriate arrangements can be made. This includes, but is not limited to, students with documented disabilities.\nCalvin University is committed to providing access to all students. If you need additional accommodations to succeed in this class, please contact Disability Services in the Center for Student Success (disabilityservices@calvin.edu) as soon as possible to explore what arrangements can be made. The three of us (student, instructor, and Disability Services) will work together to come up with an appropriate solution.\nWe will give a grade of Incomplete (I) only in unusual circumstances that have been confirmed by the Student Life office.\n\n\nDiversity and Inclusion\nI intend for this class to be an environment where we equally respect people of every ethnicity, gender, socioeconomic background, political learning, religious background, etc. And I invite your help.\nWe will not always do this well. If you or someone else in this class is hurt by something I say or do in class, I would like to work to remedy it. I’ll welcome this feedback in whatever way is comfortable for you: in public, in private, or anonymously, via my department chair (Professor VanderLinden), or via a report to Safer Spaces or the provost’s office.\n\n\nEtiquette and Wellness\nI like to understand education as forming a community of friends who love knowledge (and the God from whom all knowledge comes). So as friends and community, we expect to treat each other with respect and courteous communication practices throughout the semester in all venues, including online forums. No personal attacks, trolling, or other kinds of bad language will be tolerated.\nWe are not just developing technical skill; we are also developing virtue and character through the acquisition of a technical skill. Please, take advantage of this opportunity.\nFurthermore, a wide range of things can interfere with your learning: trouble concentrating, stress/anxiety, relationship troubles, family situations, food or housing insecurity, substance use, and many more. You are encouraged to care well for yourself by keeping a consistent sleep schedule, eating well, avoiding drugs and alcohol, exercising, and taking time to relax and connect with friends and family.\nAlso, learning how to ask for help is an important part of the college experience. Many people on campus are eager to support you. The Center for Counseling and Wellness sees one out of five students each year and can connect you with a variety of mental health resources on and off campus. You can also reach out to me, another faculty/staff, a friend, or a family member you trust for help getting connected to support. You are not alone, and help is available!",
    "crumbs": [
      "Syllabus"
    ]
  },
  {
    "objectID": "classes/01 - Introduction/09-04-slide.html",
    "href": "classes/01 - Introduction/09-04-slide.html",
    "title": "09-04 (Slides)",
    "section": "",
    "text": "Dear Heavenly Father,\nAs we gather here today to embark on a new journey of learning, we invite Your presence into this classroom.\nBless each student with wisdom, understanding, and a thirst for knowledge. Let Your light shine upon us, illuminating the path of learning, so we may contemplate your beauty and love in everything you made.\nMay this classroom be a place of respect, fellowship, and growth. Help us to be open to new ideas, to embrace challenges, and to support one another in our academic endeavors. Bless this class so that it may be a space where minds are enriched, friendships are formed, and hearts are touched.\nGuide our imaginations and desires towards your love and justice, so that we may respond adequately to your call to be Christ’s agents of renewal in the world.\nThrough our Lord Jesus Christ, your Son, who lives and reigns with you in the unity of the Holy Spirit, one God, for ever and ever.\nAmen.\n\n\n\n\n\nCreation:\n\nComputing is part of God’s world\n\nit reveals wisdom and ingenuity on how God made things work (see Isaiah 28:23-29)\nit is enabling science today (study of God’s world)\nit is enabling new technology today (building culture for God’s glory)\n\nThe process of breaking down a problem into precise steps can be a form of developing intellectual virtue\nThrough discovery and automation, it can enable human flourishing\nThere is joy in the process (creative, rewarding, fun)\n\nFall:\n\nIt is being centralized into few powerful actors, harming cultural diversity and freedom\nIt is alienating people from God’s good created order\nIt is being misused for Mammon\nConstantly idolized\n\nRedemption:\n\nWe’re called to follow Jesus in showing God’s glory through our cultural activity, which includes computing and its virtuous practice on:\n\nimagining\ndesigning\nregulating\nusing\n\n\n\n\n\n\nStand up and sit when someone says what you would say:\n\n1st round: major\n2nd round: favorite sport\n3rd round: favorite board game\n\n\n\n\n\n\n\nFrom São Carlos, Brazil\n\nPortuguese, not Spanish!\nCerrado (“brazilian savannah”), not jungle!\n\nMajor in computer engineering, PhD in complex systems modeling\nMarried to Jemima, dad of Suzana (6) and Natanael (4)\n\n\n\n\n\nHeidelberg Catechism Q&A 107:\nWhen god forbids envy, hatred, and anger, he commands us to [h] love our neighbor as ourselves; to show [i] patience, peace, [j] meekness, [k] mercy, and all kindness, towards him, [l] and prevent his hurt as much as in us lies’ and that we [m] do good, even to our enemies.\n[a]: Mat. 5:21,22; Prov. 12:18; Mat. 26:52\n[b]: Eph. 4:26; Rom. 12:19; Mat. 5:39,40\n[c]: Mat. 4:5,6,7; Col. 2:23\n[d]: Gen. 9:6; Mat. 26:52; Rom. 13:4\n[e]: James 1:20; Gal. 5:20\n[f]: Rom. 1:29; 1John 2:9\n[g]: 1John 3:15\n[h]: Mat. 22:39; Mat. 7:12\n[i]: Rom. 12:10\n[j]: Eph. 4:2; Gal. 6:1,2; Mat. 5:5; Rom. 12:18\n[k]: Ex. 23:5\n[l]: Mat. 5:45\n[m]: Rom. 12:20\n\n\nHow can I make this course lovely to you?\n\nSometimes, it is even not lovely to me…\nTogether we can make it!\n\nLet’s make “a community of people who love knowledge”\n\nNot easy! We need God.\nGet to know each other more. Change seats whenever you can!\n\n\n\n\nCome to my office in the next days to grab a treat and present yourself!\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuizzes\nWebsites I need to register\nStudy sessions\n\n\nSoftware we are using\nOffice hours\nChatGPT\n\n\nReadings\nDiversity and inclusion\nSchedule",
    "crumbs": [
      "Syllabus",
      "Classes",
      "01 - Introduction",
      "09-04 (Slides)"
    ]
  }
]