{
  "hash": "14e212433a61f7e7b118dbb459a47641",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nexecute:\n  echo: true\nformat:\n  revealjs:\n    menu: false\n    slide-level: 2\n    navigation-mode: linear\n    transition: slide\n    scrollable: true\n    simplemenu:\n        barhtml:\n            header: \"<div class='menubar'><ul class='menu'></ul></div>\"\n        scale: 0.67\nrevealjs-plugins:\n    - simplemenu\ntitle: \"09-06 (Slides)\"\n---\n\n\n\n\n::: {.smaller}\n\n\n> Go and work\\\n> Honor the One who is working on you.\\\n> Do so by making beautiful things,\\\n> Be serving in beautiful ways,\\\n> By speaking up for the weak whose beauty is being maligned,\\\n> By filling this city with the aroma of good and beautiful work\n>\n> Reflect the beautiful work of your heavenly Father,\\\n> Nourished now by the grace and mercy of Christ,\\\n> In the power of the Holy Spirit.\n>\n> God has already accomplished the great work.\\\n> God goes before you and behind you.\\\n> God works at your side.\n>\n> (Matthew Kaemingk & Cory B. Willson, *Work and Worship*, p. 140)\n\n\n\n:::\n\n# Retrieval\n\n\n- What are programs? What are computations? What are algorithms?\n\n\\TextField[multiline=true, width=\\linewidth, height=2.5em]{}\n\n\n- What is code?\n\n\\TextField[multiline=true, width=\\linewidth, height=2.5em]{}\n\n\n- What is a programming language?\n\n\\TextField[multiline=true, width=\\linewidth, height=2.5em]{}\n\n\n- Why it can be hard to use a programming language?\n\n\\TextField[multiline=true, width=\\linewidth, height=2.5em]{}\n\n\n# Objects and Variables {data-stack-name=\"objects and variables\"}\n\n## Object\n\n-   Python syntax specifies some ways to represent different types of data. A data representation in Python is called an \"object\".\n\n| Type                            | Object type in Python | Example          |\n|---------------------------------|-----------------------|------------------|\n| Integer number                  | `int`                 | `123`            |\n| Decimal number (floating point) | `float`               | `3.14`           |\n| Logic value                     | `bool`                | `True`, `False`  |\n| Text                            | `string`              | `\"Hello World!\"` |\n\n## Variables\n\n-   Variables are names we set to refer to objects.\n    -   A not-so-good metaphor: variables are containers for objects\n    -   A better metaphor: objects are houses, variables are addresses of these houses\n\n::: {#5b3556bc .cell execution_count=1}\n``` {.python .cell-code}\nx = 123  # a variable x that contains the integer value 123\nx = x + 1  # x is updated with the value of x + 1, becoming 124...\nhello = \"Hello World!\"  # a variable that contains the string \"Hello World!\"\nis_done = True  # a variable is_done with the logic value True\n```\n:::\n\n\n## Objects x variables\n\n-   It is **very important** to differentiate!\n-   Which of the following are variables and which are objects?\n\n```         \n\"hello\"\n\nhello\n\n132\n\nvar_1\n\ntruev\n\nTrue\n```\n\n## Variable naming conventions in Python\n\n-   They MUST start with a letter or with \\_ (underline)\n-   They are case sensitive ('C' is different from 'c')\n-   They can't contain: `{ ( + - * / \\ ; . , ?`\n-   They can't have names of words already reserved for other purposes in Python:\n\n![](/img/reserved.png){width=80%}\n\n--- \n\n-   What happens if?\n\n::: {#4ba908e6 .cell execution_count=2}\n``` {.python .cell-code}\nTrue = 123\n```\n:::\n\n\n::: {#95a9aece .cell execution_count=3}\n``` {.python .cell-code}\n\"Hello\" = world\n```\n:::\n\n\n::: {#c5ac4b93 .cell execution_count=4}\n``` {.python .cell-code}\n1stcar = 2000\n```\n:::\n\n\n# Assignments {data-stack-name=\"assignments\"}\n\n##\n\nWhen Python sees the operator `=` it does the following:\n\n1.  Evaluates the **right-hand side** (rhs)\n\n    -   The right of the assignment operator can be:\n\n        -   Objects: `age = 21`\n\n        -   Variables: `my_cost = your_cost`\n\n        -   Expressions: `x = (x + 1) * y`\n\n2.  Assigns the resulting object to the variable on the **left-hand side** (lhs)\n\n    -   Only a **single variable** is allowed on the left side!\n\n    -   For example, `x + 1 = 2` is WRONG SYNTAX!\n\n## Compound assignment operators {data-name=\"compound assignment\"}\n\n-   Python and other languages make available a shortcut for performing operations in variables and updating them.\n-   For example,\n\n::: {#70bc4f26 .cell execution_count=5}\n``` {.python .cell-code}\nw = 5\nw += 1\nprint(w)\n```\n:::\n\n\nis the same as:\n\n::: {#5bd07c77 .cell execution_count=6}\n``` {.python .cell-code}\nw = 5\nw = w + 1\nprint(w)\n```\n:::\n\n\n---\n\nYou can use compound assignment with all operators!\n\n::: {#f4547486 .cell execution_count=7}\n``` {.python .cell-code}\ny += 1 # add then assign value\ny -= 1 # subtract then assign value\ny *= 2 # multiply then assign value\ny /= 3 # divide then assign value\ny // = 5 # floor divide then assign value\ny **= 2 # increase to the power of then assign value\ny %= 3 # return remainder then assign value\n```\n:::\n\n\n---\n\nExample: what will this expression do?\n\n::: {#448e19ed .cell execution_count=8}\n``` {.python .cell-code}\nx *= y - 2\n```\n:::\n\n\n# Converting basic objects {data-stack-name=\"conversion\"}\n\n#### **1. Converting to Integer**\n- **From Float:** `int(3.14)` results in `3`\n- **From String:** `int(\"42\")` results in `42`\n- **Invalid Conversion:** `int(\"hello\")` raises a `ValueError`\n\n#### **2. Converting to Float**\n- **From Integer:** `float(7)` results in `7.0`\n- **From String:** `float(\"3.14\")` results in `3.14`\n- **Invalid Conversion:** `float(\"abc\")` raises a `ValueError`\n\n#### **3. Converting to String**\n- **From Integer:** `str(123)` results in `\"123\"`\n- **From Float:** `str(9.99)` results in `\"9.99\"`\n\n## Example Code\n\n```python\n# Convert float to integer\nnum = int(5.7)  # 5\n\n# Convert integer to string\ntext = str(123)  # \"123\"\n\n# Convert string to float\npi = float(\"3.14159\")  # 3.14159\n```\n\n",
    "supporting": [
      "09-06-slide_files"
    ],
    "filters": [],
    "includes": {}
  }
}