---
title: "05 - Functions"
format:
  html:
    toc-expand: 4
---

Objectives for this unit:

## Functions - basics
-   Define a function and explain its purpose in programming, such as code reuse, modularity, and readability.
-   Understand the flow of code execution in function calls.
-   Write and call basic functions using the def keyword.
-   Define and call functions with parameters to accept input values.
-   Use the return statement to return values from functions.
-   Understand the difference between functions that return values and those that do not.
-   Reflect on how centralizing abstractions are a form of power, and how we can live in a world of this "networked power".

## Functions - Python techniques and variable scope
-   Differentiate between keyword and positional arguments.
-   Define functions with default parameter values.
-   Explain the concept of variable scope within functions, and differentiate between local and global variables.
-   Use the global keyword to modify global variables within functions.
-   Reflect on functions as abstractions and how this poses some ethical problems.
-   Write docstrings to document functions and reflect on their usability.

## String methods
-   Use common string methods (len(), lower(), upper(), strip(), split(), join(), replace(), find(), count()).
-   Use different string formatting techniques (% formatting, str.format(), f-strings).

# Modules
-   Use the import statement to import entire modules.
-   Use from ... import ... to import specific functions or variables from a module.
-   Understand the use of as to create aliases for modules and functions.
-   Create custom modules by organizing code into separate files.
-   Explain the concept of namespaces and their role in avoiding naming conflicts.
-   Use the if `__name__` == `"__main__"`: construct to write code that can be run as a script or imported as a module.
-   Explore documentation and use common standard library modules (e.g., os, sys, math, datetime).